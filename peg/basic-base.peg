#
#  Basic Parser - TurboBasic XL compatible parsing and transformation tool.
#  Copyright (C) 2015 Daniel Serpell
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Full program
Program   = UnicodeBOM?    # Optional Unicode BOM
            ProgramLine*   # Zero or more lines
            EndOfFile      # End of file

# One program line, can be:
ProgramLine      = !EndOfFile SPC
                    ( EndOfLine                                 # An empty line
                    | '$' SPC DirectiveLine                     # A parser directive
                    | ':' SPC StatementLine EndOfLine           # A line with statements after a ':'
                    | LineNumber EndOfLine                      # A line-number alone
                    | LineNumber SPC StatementLine EndOfLine    # A line-number and statements
                    | StatementLine EndOfLine                   # Only statements
                    | < ERROR > EndOfLine               { print_error("input line", yytext); }
                    )

# One statement line, with multiple statements separated by ':'
StatementLine    = Statement ( ':' SPC Statement
                             | ':' SPC EndOfLine        { print_error("statement", yytext); }
                             | < ERROR >                { print_error("end of line/statement", yytext); }
                             )*

# One statement
Statement        =
                 # Start with comments, *except* REM, as we try to support variable
                 # names starting with "rem".
                   < REM_C NotEOL* >            { add_stmt(STMT_REM, add_comment(yytext, yyleng)); }
                 | < REM_ SPC NotEOL* >         { add_stmt(STMT_REM_, add_comment(yytext, yyleng)); }
                 # Special case: TIME$= is a statement, but has an '=' sign, so must
                 # test before testing variables.
                 | TIME_S t:StrExprErr          { add_stmt(STMT_TIME_S,t); }
                 # Allows a space after TIME$, this makes parser less confusing.
                 | &{ testToken( TOK_TIMEP ) } SPC '=' SPC t:StrExprErr
                                                { add_stmt(STMT_TIME_S,t); }
                 # Test variable assignment, this fails (and goes to the rest of
                 # statements if there is no '=' sign after the variable name.
                 | t:LetExprStr  !THEN          { add_stmt(STMT_LET_INV,t); }
                 | t:LetExprNum  !THEN !FOR_TO  { add_stmt(STMT_LET_INV,t); }
                 # Standard REM comments
                 | < REM  NotEOL* >             { add_stmt(STMT_REM, add_comment(yytext, yyleng)); }
                 # Follows the standard statements, listed here in alphabetical order
                 | BYE                          { add_stmt(STMT_BYE,0); }
                 | BPUT   t:IONumExpr2          { add_stmt(STMT_BPUT,t); }
                 | BGET   t:IONumExpr2          { add_stmt(STMT_BGET,t); }
                 | BLOAD  t:StrExprErr          { add_stmt(STMT_BLOAD,t); }
                 | BRUN   t:StrExprErr          { add_stmt(STMT_BRUN,t); }
                 | COLOR  t:NumExprErr          { add_stmt(STMT_COLOR,t); }
                 | CONT                         { add_stmt(STMT_CONT,0); }
                 | COM    t:DimVarList          { add_stmt(STMT_COM,t); }
                 | CLOSE {t=0;} t:IOChanErr?    { add_stmt(STMT_CLOSE,t); }
                 | CLR                          { add_stmt(STMT_CLR,0); }
                 | CLS   {t=0;} t:IOChanErr?    { add_stmt(STMT_CLS,t); }
                 | CLOAD                        { add_stmt(STMT_CLOAD,0); }
                 | CIRCLE t:NumExpr3            { add_stmt(STMT_CIRCLE,t); }
                 | CSAVE                        { add_stmt(STMT_CSAVE,0); }
                 | DATA   < NotEOL* >           { add_stmt(STMT_DATA,add_data_stmt(yytext, yyleng)); add_force_line(); }
                 | DEG                          { add_stmt(STMT_DEG,0); }
                 | DIM    t:DimVarList          { add_stmt(STMT_DIM,t); }
                 | DOS                          { add_stmt(STMT_DOS,0); }
                 | DRAWTO t:NumExpr2            { add_stmt(STMT_DRAWTO,t); }
                 | DPOKE  t:NumExpr2            { add_stmt(STMT_DPOKE,t); }
                 | DO                           { add_stmt(STMT_DO,0); }
                 | DIR    {t=0;} t:StrExprErr?  { add_stmt(STMT_DIR,t); }
                 | DELETE t:StrExprErr          { add_stmt(STMT_DELETE,t); }
                 | DEL    t:NumExpr2            { add_stmt(STMT_DEL,t); }
                 | DUMP   {t=0;} t:StrExprErr?  { add_stmt(STMT_DUMP,t); }
                 | DSOUND {t=0;} t:NumExpr4?    { add_stmt(STMT_DSOUND,t); }
                 | ENTER  t:StrExprErr          { add_stmt(STMT_ENTER,t); }
                 | ELSE                         { add_stmt(STMT_ELSE,0); }
                 | ENDIF                        { add_stmt(STMT_ENDIF,0); }
                 | EXIT   {t=0;} t:NumExprErr?  { add_stmt(STMT_EXIT,t); }
                 | EXEC   t:LabelExecParList    { add_stmt(STMT_EXEC_PAR,t); }
                 | EXEC   t:Label               { add_stmt(STMT_EXEC,t); }
                 | ENDPROC                      { add_stmt(STMT_ENDPROC,0); }
                 | END                          { add_stmt(STMT_END,0); }
                 | FOR    t:ForStmtExpr         { add_stmt(STMT_FOR,t); }
                 | FILLTO t:NumExpr2            { add_stmt(STMT_FILLTO,t); }
                 | FCOLOR t:NumExprErr          { add_stmt(STMT_FCOLOR,t); }
                 | GOTO   t:NumExprErr          { add_stmt(STMT_GOTO,t); }
                 | GO_TO  t:NumExprErr          { add_stmt(STMT_GO_TO,t); }
                 | GOSUB  t:NumExprErr          { add_stmt(STMT_GOSUB,t); }
                 | GET    t:GetExpr             { add_stmt(STMT_GET,t); }
                 | GRAPHICS t:NumExprErr        { add_stmt(STMT_GRAPHICS,t); }
                 | GO_S   t:Label               { add_stmt(STMT_GO_S,t); }
                 | INPUT  t:InputExpr           { add_stmt(STMT_INPUT,t); }
                 # We split the IF into three cases:
                 # 1- IF/THEN followed by a number, forcing a line-break.
                 | IF     t:IfNumberExpr        { add_stmt(STMT_IF_NUMBER,t); }
                    ( ':' SPC < NotEOL* >       { add_stmt(STMT_REM, add_comment(yytext, yyleng)); } )?
                                                { add_force_line(); }
                 # 2- IF/THEN followed by statements, adding an invisible ENDIF at
                 # the end of the statements and forcing a line-break.
                 | IF     t:IfThenExpr          { add_stmt(STMT_IF_THEN,t); }
                    StatementLine               { add_stmt(STMT_ENDIF_INVISIBLE,0); add_force_line(); }
                 # 3- A multi-line IF
                 | IF     t:NumExprErr          { add_stmt(STMT_IF_MULTILINE,t); }
                 | LIST  { t=0; } t:ListExpr?   { add_stmt(STMT_LIST,t); }
                 | LET    t:LetExpr             { add_stmt(STMT_LET,t); }
                 | LOAD   t:StrExprErr          { add_stmt(STMT_LOAD,t); }
                 | LOCATE t:LocateExpr          { add_stmt(STMT_LOCATE,t); }
                 | LPRINT t:PrintExpr           { add_stmt(STMT_LPRINT,t); }
                 | LOOP                         { add_stmt(STMT_LOOP,0); }
                 | LOCK   t:StrExprErr          { add_stmt(STMT_LOCK,t); }
                 | MOVE   t:NumExpr3            { add_stmt(STMT_MOVE,t); }
                 | N_MOVE t:NumExpr3            { add_stmt(STMT_N_MOVE,t); }
                 | NEXT   t:PVarNum             { add_stmt(STMT_NEXT,t); }
                 | NEW                          { add_stmt(STMT_NEW,0); }
                 | NOTE   t:IOVarNumExpr2       { add_stmt(STMT_NOTE,t); }
                 | OPEN   t:OpenExpr            { add_stmt(STMT_OPEN,t); }
                 | ON     t:OnExpr              { add_stmt(STMT_ON,t); }
                 | POINT  t:IONumExpr2          { add_stmt(STMT_POINT,t); }
                 | POKE   t:NumExpr2            { add_stmt(STMT_POKE,t); }
                 | PRINT  t:PrintIoExpr         { add_stmt(STMT_PRINT,t); }
                 | PRINT_ t:PrintIoExpr         { add_stmt(STMT_PRINT_,t); }
                 | POP                          { add_stmt(STMT_POP,0); }
                 | PUT    t:PutExpr             { add_stmt(STMT_PUT,t); }
                 | PLOT   t:NumExpr2            { add_stmt(STMT_PLOT,t); }
                 | POSITION t:NumExpr2          { add_stmt(STMT_POSITION,t); }
                 | PAUSE  t:NumExprErr          { add_stmt(STMT_PAUSE,t); }
                 | PROC   t:LabelProcVarList    { add_stmt(STMT_PROC_VAR,t); }
                 | PROC   t:Label               { add_stmt(STMT_PROC,t); }
                 | PAINT  t:NumExpr2            { add_stmt(STMT_PAINT,t); }
                 | RAD                          { add_stmt(STMT_RAD,0); }
                 | READ   t:VariableList        { add_stmt(STMT_READ,t); }
                 | RESTORE (t:LabelOrLNumExpr   { add_stmt(STMT_RESTORE,t); } | { add_stmt(STMT_RESTORE,0); } )
                 | RETURN                       { add_stmt(STMT_RETURN,0); }
                 | RUN   (t:StrExpr             { add_stmt(STMT_RUN,t); } | { add_stmt(STMT_RUN,0); } )
                 | REPEAT                       { add_stmt(STMT_REPEAT,0); }
                 | RENAME t:StrExprErr          { add_stmt(STMT_RENAME,t); }
                 | RENUM  t:NumExpr3            { add_stmt(STMT_RENUM,t); }
                 | SAVE   t:StrExprErr          { add_stmt(STMT_SAVE,t); }
                 | STATUS t:StatusExpr          { add_stmt(STMT_STATUS,t); }
                 | STOP                         { add_stmt(STMT_STOP,0); }
                 | SETCOLOR t:NumExpr3          { add_stmt(STMT_SETCOLOR,t); }
                 | SOUND  {t=0;} t:NumExpr4?    { add_stmt(STMT_SOUND,t); }
                 | TRAP   t:LabelOrLNumExpr     { add_stmt(STMT_TRAP,t); }
                 | TRACE                        { add_stmt(STMT_TRACE,0); }
                 | TEXT   t:Num2StrExpr         { add_stmt(STMT_TEXT,t); }
                 | UNTIL  t:NumExprErr          { add_stmt(STMT_UNTIL,t); }
                 | UNLOCK t:StrExprErr          { add_stmt(STMT_UNLOCK,t); }
                 | WHILE  t:NumExprErr          { add_stmt(STMT_WHILE,t); }
                 | WEND                         { add_stmt(STMT_WEND,0); }
                 | XIO    t:XioExpr             { add_stmt(STMT_XIO,t); }
                 | F_F    {t=0;} t:FlagExpr?    { add_stmt(STMT_F_F,t); }
                 | F_L    {t=0;} t:FlagExpr?    { add_stmt(STMT_F_L,t); }
                 | F_B    {t=0;} t:FlagExpr?    { add_stmt(STMT_F_B,t); }
                 | P_PUT  t:PutExpr             { add_stmt(STMT_P_PUT,t); }
                 | P_GET  t:GetExpr             { add_stmt(STMT_P_GET,t); }
                 | SHARP  t:Label               { add_stmt(STMT_LBL_S,t); }
                 # A basic ERROR- line, parsed for compatibility
                 | < BAS_ERROR ERROR >          { add_stmt(STMT_BAS_ERROR, add_comment(yytext,yyleng)); print_error("statement", yytext); }
                 # And, if not any of the above, we declare a parsing error
                 | < ERROR >                    { add_stmt(STMT_BAS_ERROR, add_comment(yytext,yyleng)); print_error("statement", yytext); }

# Catches errors and skips to end of statement
ERROR            = [^:\233\015\n\t ][^:\015\n\233]*
# Catches errors and skips to end of expression
ERROREXP         = [^:\233\015\n\t ][^,:\015\n\233]*

# BPUT / BGET / POINT
IONumExpr2       = l:IOChanErr COMMA r:NumExpr2         { $$ = ex_bin(l,r,TOK_COMMA); }

# Assignments
LetExpr          = LetExprStr | LetExprNum
LetExprStr       = l:AssignVarStr EQ r:StrExprErr       { $$ = ex_bin(l,r,TOK_S_ASGN); }
LetExprNum       = l:AssignVarNum EQ r:NumExprErr       { $$ = ex_bin(l,r,TOK_F_ASGN); }

# Expressions
NumExpr2         = l:NumExprErr COMMA r:NumExprErr      { $$ = ex_bin(l,r,TOK_COMMA); }
                  | < ERROR > { print_error("2 numeric expressions", yytext); }
NumExpr3         = l:NumExpr2 COMMA r:NumExprErr        { $$ = ex_bin(l,r,TOK_COMMA); }
                  | < ERROR > { print_error("3 numeric expressions", yytext); }
NumExpr4         = l:NumExpr3 COMMA r:NumExprErr        { $$ = ex_bin(l,r,TOK_COMMA); }
                  | < ERROR > { print_error("4 numeric expressions", yytext); }
IOChan           = SHARP r:NumExprErr                   { $$ = ex_bin(0,r,TOK_SHARP); }
IOChanErr        = IOChan
                  | < ERROREXP >                        { print_error("I/O channel (#)", yytext); $$ = 0; }
AnyExpr          = NumExpr | StrExpr
VarNumComma      = l:PVarNum (COMMA r:PVarNum           { l = ex_comma(l,r); }
                             )*                         { $$ = l; }
NumComma         = l:NumExprErr (COMMA r:NumExprErr     { l = ex_comma(l,r); }
                                )*                      { $$ = l; }
LabelComma       = l:Label (COMMA r:Label               { l = ex_comma(l,r); }
                           )*                           { $$ = l; }

PrintExpr        = {l=0;} l:AnyExpr?
                        ( COMMA r:AnyExpr               { l = ex_bin(l,r,TOK_COMMA); }
                        | SEMICOLON r:AnyExpr           { l = ex_bin(l,r,TOK_SEMICOLON); }
                        | COMMA                         { l = ex_bin(l,0,TOK_COMMA); }
                        | SEMICOLON                     { l = ex_bin(l,0,TOK_SEMICOLON); }
                        )*                              { $$ = l; }

FlagExpr         = MINUS                                { $$ = ex_bin(0,0,TOK_MINUS); }
                 | PLUS                                 { $$ = ex_bin(0,0,TOK_PLUS); }
# FOR statement expression:
ForStmtExpr      = l:PVarNum EQ r:NumExprErr            { l = ex_bin(l,r,TOK_F_ASGN); }
                   FOR_TO r:NumExprErr                  { l = ex_bin(l,r,TOK_FOR_TO); }
                   (STEP r:NumExprErr                   { l = ex_bin(l,r,TOK_STEP); }
                   )?                                   { $$ = l; }

# GET / %GET expressions:
GetExpr          = l:IOChan COMMA r:VarNumComma         { $$ = ex_comma(l, r); }
                 | VarNumComma

# PUT / %PUT expressions:
PutExpr          = l:IOChan COMMA r:NumComma            { $$ = ex_comma(l, r); }
                 | NumComma

# XIO expression:
XioExpr          = n1:NumExprErr COMMA n2:IOChanErr COMMA n3:NumExpr2 COMMA n4:StrExprErr
                                                        { $$ = ex_comma(ex_comma(ex_comma(n1,n2),n3),n4); }

# STATUS expression
StatusExpr       = l:IOChanErr COMMA r:PVarNum          { $$ = ex_comma(l,r); }

# PRINT and ? expressions:
PrintIoExpr      = l:IOChan
                      ( COMMA r:PrintExpr               { l = ex_bin(l,r, TOK_COMMA); }
                      | SEMICOLON r:PrintExpr           { l = ex_bin(l,r, TOK_SEMICOLON); }
                      )?                                { $$ = l; }
                 | PrintExpr

# INPUT expressions:
InputExpr        = l:IOChan COMMA r:VariableList        { $$ = ex_comma(l,r); }
                 | l:IOChan SEMICOLON r:VariableList    { $$ = ex_bin(l,r,TOK_SEMICOLON); }
                 | l:StringData
                    ( COMMA r:VariableList              { $$ = ex_comma(l,r); }
                    | SEMICOLON r:VariableList          { $$ = ex_bin(l,r,TOK_SEMICOLON); }
                    )
                 | VariableList

# IF / THEN number
IfNumberExpr     = l:NumExprErr THEN r:Number           { $$ = ex_bin(l,r,TOK_THEN); }

# IF / THEN statement
IfThenExpr       = l:NumExprErr THEN                    { $$ = ex_bin(l,0,TOK_THEN); }

# LIST expression:
ListExpr         = l:StrExpr
                        ( COMMA r:NumExpr               { l = ex_comma(l,r); }
                           ( COMMA r:NumExpr            { l = ex_comma(l,r); } )? )?
                                                        { $$ = l; }
                 | l:NumExpr COMMA r:NumExprErr         { $$ = ex_comma(l,r); }
                 | NumExprErr

# LOCATE expression:
LocateExpr       = l:NumExpr2 COMMA r:PVarNum           { $$ = ex_comma(l,r); }

# Used in NOTE
IOVarNumExpr2    = n1:IOChanErr COMMA n2:PVarNum COMMA n3:PVarNum       { $$ = ex_comma(ex_comma(n1,n2),n3); }

# OPEN expression:
OpenExpr         = n1:IOChanErr COMMA n2:NumExprErr COMMA n3:NumExprErr COMMA n4:StrExprErr
                                                        { $$ = ex_comma(ex_comma(ex_comma(n1,n2),n3),n4); }

# ON GOTO/GOSUB/GO#/EXEC
OnExpr           = l:NumExprErr
                        ( ON_GOTO    r:NumComma         { $$ = ex_bin(l,r,TOK_ON_GOTO); }
                        | ON_GOSUB   r:NumComma         { $$ = ex_bin(l,r,TOK_ON_GOSUB); }
                        | ON_GOSHARP r:LabelComma       { $$ = ex_bin(l,r,TOK_ON_GOSHARP); }
                        | ON_EXEC    r:LabelComma       { $$ = ex_bin(l,r,TOK_ON_EXEC); }
                        | < ERROR >  { print_error("on goto/gosub/go#/exec", yytext); $$ = l; }
                        )

# Used on RESTORE and TRAP:
LabelOrLNumExpr  = SHARP r:Label                        { $$ = ex_bin(0,r,TOK_SHARP); }
                 | NumExprErr

# Used on TEXT
Num2StrExpr      = l:NumExpr2 COMMA r:StrExprErr        { $$ = ex_comma(l,r); }

# Parse PROC with parameters:  PROC label, var1, var2$(size), varN; local1, local2, localN
ProcVar          = PVarNum
                 | l:PDimVarStr r:ConstNum R_PRN        { $$ = ex_bin(l,r,TOK_DS_L_PRN); }
                 | < ERROR >  { print_error("proc argument", yytext); $$ = l; }
ProcVariableList = l:ProcVar (COMMA r:ProcVar           { l = ex_comma(l,r); }
                             )*                         { $$ = l; }
ProcVarList      = COMMA? SEMICOLON r:ProcVariableList  { $$ = ex_bin(0,r,TOK_SEMICOLON); }
                 | COMMA l:ProcVariableList
                      ( SEMICOLON r:ProcVariableList
                      |                                 { r = 0; }
                      )?                                { $$ = ex_bin(l,r,TOK_SEMICOLON); }

LabelProcVarList = l:Label r:ProcVarList                { $$ = ex_comma(l,r); }

# Parse EXEC with parameters: EXEC label, param1, param2, paramN
ExecParExpr      = r:NumExpr                            { $$ = ex_bin(0,r,TOK_F_ASGN); }
                 | r:StrExpr                            { $$ = ex_bin(0,r,TOK_S_ASGN); }
AnyExprList      = l:ExecParExpr ( COMMA r:ExecParExpr  { l = ex_comma(l,r); }
                                 )*                     { $$ = l; }

LabelExecParList = l:Label COMMA r:AnyExprList          { $$ = ex_comma(l,r); }

# Used in INPUT or READ, needs a list of numeric or string variables.
VariableList     = l:PVarNumStr (COMMA r:PVarNumStr     { l = ex_comma(l,r); }
                                )*                      { $$ = l; }
                 | < ERROR > { print_error("numeric or string variable", yytext); $$ = 0; }
PVarNumStr       = PVarNum
                 | PVarStr
AssignVarNum     = l:PVarArray r:ArrayAccess            { $$ = ex_bin(l,r,TOK_A_L_PRN); }
                 | PVarNum
AssignVarStr     = l:PVarStr ( L_PRN r:ArrayAccess      { l = ex_bin(l,r,TOK_S_L_PRN); }
                             )?                         { $$ = l; }
ArrayAccess      = l:NumExprErr ( COMMA r:NumExprErr    { l = ex_bin(l,r,TOK_A_COMMA); }
                                )? R_PRN                { $$ = l; }

DimVarList       = l:DimVar (COMMA r:DimVar             { l = ex_comma(l,r); }
                            )*                          { $$ = l; }
DimVar           = l:PDimVarArray r:ArrayAccess         { $$ = ex_bin(l,r,TOK_D_L_PRN); }
                 | l:PDimVarStr r:NumExpr R_PRN         { $$ = ex_bin(l,r,TOK_DS_L_PRN); }
                 | < ERROREXP >                         { print_error("DIM string/array", yytext); $$ = 0; }

# Variables
Label            = < Identifier >               SPC     { $$ = add_ident(yytext, vtLabel);  }
PVarStr          = < Identifier > '$'           SPC     { $$ = add_ident(yytext, vtString); }
PVarNum          = < Identifier > ![$(]         SPC     { $$ = add_ident(yytext, vtFloat);  }
PVarArray        = < Identifier >         L_PRN SPC     { $$ = add_ident(yytext, vtArray);  }
PDimVarArray     = < Identifier >         L_PRN SPC     { $$ = add_ident(yytext, vtArray);  }
PDimVarStr       = < Identifier > '$' SPC L_PRN SPC     { $$ = add_ident(yytext, vtString); }

# Defs
StringDef        = '@' < Identifier > '$'  { $$ = add_strdef_val(yytext); }           SPC
NumericDef       = '@' < Identifier > !'$' { $$ = add_numdef_val(yytext); }           SPC

# Those constructs produce errors if not matched
NumExprErr       = NumExpr
                  | < ERROREXP > { print_error("numeric expression", yytext); $$ = 0; }
StrExprErr       = StrExpr
                  | < ERROREXP > { print_error("string expression", yytext); $$ = 0; }

# String expressions
StrExpr          = STRP    r:ParNumExpr                 { $$ = ex_bin(0,r,TOK_STRP); }
                 | CHRP    r:ParNumExpr                 { $$ = ex_bin(0,r,TOK_CHRP); }
                 | HEXP    r:ParNumExpr                 { $$ = ex_bin(0,r,TOK_HEXP); }
                 | INKEYP                               { $$ = ex_bin(0,0,TOK_INKEYP); }
                 | TIMEP                                { $$ = ex_bin(0,0,TOK_TIMEP); }
                 | StringData
                 | StringDef
                 | AssignVarStr

# Any type of string
StringData       = ( ConstString
                   | ExtendedString )   { $$ = add_string(); }

# Constant string, enclosed in ""
ConstString      = '"' < StrContent? ( '"' '"' StrContent? )* > { push_string_const(yytext, yyleng); } '"' SPC
StrContent       = [^"]+

# Extended string, enclosed in [" "]
ExtStringStart  = '[' '"'
ExtStringEnd    = '"' ']'
ExtendedString   = ExtStringStart < (!ExtStringEnd . )* >
                 (
                   ExtStringEnd { push_extended_string(yytext, yyleng); }
                 | EndOfFile { print_error("end of extended string (\"])", yytext); }
                 )

# Numeric Expressions
NumExpr          = l:AndExpr (
                      OR r:AndExpr                      { l = ex_bin(l,r,TOK_OR); }
                    )*                                  { $$ = l; }

AndExpr          = l:CompExpr (
                      AND r:CompExpr                    { l = ex_bin(l,r,TOK_AND); }
                    )*                                  { $$ = l; }

CompExpr         =
                   l:NotExpr (
                       LEQ r:NotExpr                    { l = ex_bin(l,r,TOK_N_LEQ); }
                     | NEQ r:NotExpr                    { l = ex_bin(l,r,TOK_N_NEQ); }
                     | GEQ r:NotExpr                    { l = ex_bin(l,r,TOK_N_GEQ); }
                     | LE  r:NotExpr                    { l = ex_bin(l,r,TOK_N_LE); }
                     | GE  r:NotExpr                    { l = ex_bin(l,r,TOK_N_GE); }
                     | EQ  r:NotExpr                    { l = ex_bin(l,r,TOK_N_EQ); }
                     )*                                 { $$ = l; }

NotExpr          = NOT r:NotExpr                        { $$ = ex_bin(0,r,TOK_NOT); }
                 | AddExpr

AddExpr          = l:MultExpr (
                     PLUS  r:MultExpr                   { l = ex_bin(l,r,TOK_PLUS); }
                   | MINUS r:MultExpr                   { l = ex_bin(l,r,TOK_MINUS); }
                   )*                                   { $$ = l; }

MultExpr         = l:BitExpr (
                     STAR  r:BitExpr                    { l = ex_bin(l,r,TOK_STAR); }
                   | SLASH r:BitExpr                    { l = ex_bin(l,r,TOK_SLASH); }
                   | DIV   r:BitExpr                    { l = ex_bin(l,r,TOK_DIV); }
                   | MOD   r:BitExpr                    { l = ex_bin(l,r,TOK_MOD); }
                   )*                                   { $$ = l; }

BitExpr          = l:PowExpr (
                       ANDPER r:PowExpr                 { l = ex_bin(l,r,TOK_ANDPER); }
                     | EXCLAM r:PowExpr                 { l = ex_bin(l,r,TOK_EXCLAM); }
                     | EXOR   r:PowExpr                 { l = ex_bin(l,r,TOK_EXOR); }
                     )*                                 { $$ = l; }

PowExpr          = l:NegExpr (
                     CARET r:NegExpr                    { l = ex_bin(l,r,TOK_CARET); }
                     )*                                 { $$ = l; }

NegExpr          = MINUS r:NegExpr                      { $$ = ex_bin(0,r,TOK_UMINUS); }
                 | PLUS  r:NegExpr                      { $$ = ex_bin(0,r,TOK_UPLUS); }
                 | UnitExpr

UnitExpr         = ConstNum
                 | StrCompExpr
                 | L_PRN r:NumExpr R_PRN                { $$ = ex_bin(0,r,TOK_L_PRN); }
                 | USR    r:ParUsrExpr                  { $$ = ex_bin(0,r,TOK_USR); }
                 | ASC    r:ParStrExpr                  { $$ = ex_bin(0,r,TOK_ASC); }
                 | VAL    r:ParStrExpr                  { $$ = ex_bin(0,r,TOK_VAL); }
                 | LEN    r:ParStrExpr                  { $$ = ex_bin(0,r,TOK_LEN); }
                 | ADR    r:ParStrExpr                  { $$ = ex_bin(0,r,TOK_ADR); }
                 | ATN    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_ATN); }
                 | COS    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_COS); }
                 | PEEK   r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_PEEK); }
                 | SIN    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_SIN); }
                 | RND    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_RND); }
                 | RND_S                                { $$ = ex_bin(0,0,TOK_RND_S); }
                 | FRE    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_FRE); }
                 | EXP    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_EXP); }
                 | LOG    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_LOG); }
                 | CLOG   r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_CLOG); }
                 | SQR    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_SQR); }
                 | SGN    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_SGN); }
                 | ABS    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_ABS); }
                 | INT    r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_INT); }
                 | PADDLE r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_PADDLE); }
                 | STICK  r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_STICK); }
                 | PTRIG  r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_PTRIG); }
                 | STRIG  r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_STRIG); }
                 | DPEEK  r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_DPEEK); }
                 | INSTR  r:ParInstrExpr                { $$ = ex_bin(0,r,TOK_INSTR); }
                 | DEC    r:ParStrExpr                  { $$ = ex_bin(0,r,TOK_DEC); }
                 | FRAC   r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_FRAC); }
                 | RAND   r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_RAND); }
                 | TRUNC  r:ParNumExpr                  { $$ = ex_bin(0,r,TOK_TRUNC); }
                 | UINSTR r:ParInstrExpr                { $$ = ex_bin(0,r,TOK_UINSTR); }
                 | TIME                                 { $$ = ex_bin(0,0,TOK_TIME); }
                 | ERR                                  { $$ = ex_bin(0,0,TOK_ERR); }
                 | ERL                                  { $$ = ex_bin(0,0,TOK_ERL); }
                 | AssignVarNum

# Compile time constant numeric expression - note that we could support more
# values with optimization ON
ConstNum         = Number
                 | NumericDef
                 | PER_0                                { $$ = ex_bin(0,0,TOK_PER_0); }
                 | PER_1                                { $$ = ex_bin(0,0,TOK_PER_1); }
                 | PER_2                                { $$ = ex_bin(0,0,TOK_PER_2); }
                 | PER_3                                { $$ = ex_bin(0,0,TOK_PER_3); }

# String comparisons is a type of numeric expresion
StrCompExpr      = l:StrExpr (
                     LEQ r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_LEQ); }
                   | NEQ r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_NEQ); }
                   | GEQ r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_GEQ); }
                   | LE  r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_LE); }
                   | GE  r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_GE); }
                   | EQ  r:StrExprErr                   { $$ = ex_bin(l,r,TOK_S_EQ); }
                   )

# Parameters to an USR function, one or more numeric expressions in parenthesis
NumAComma        = l:NumExprErr (COMMA r:NumExprErr     { l = ex_bin(l,r,TOK_A_COMMA); }
                             )*                         { $$ = l; }
ParUsrExpr       = L_PRN ( l:NumAComma R_PRN            { $$ = l; }
                          | < ERROREXP >                { print_error("numeric (,numeric) expressions", yytext); $$ = 0; }
                          )

# Parameters to functions with one numeric expression in parenthesis
ParNumExpr        = L_PRN ( l:NumExpr R_PRN             { $$ = l; }
                           | < ERROREXP >               { print_error("numeric expression in parenthesis", yytext); $$ = 0; }
                           )

# Parameters to INSTR/UINSTR functions, two string expressions and optionally one numeric
# expression, all in parenthesis
ParInstrExpr      = L_PRN
                        ( l:StrExpr COMMA r:StrExpr     { l = ex_bin(l,r,TOK_A_COMMA); }
                                  ( COMMA r:NumExpr     { l = ex_bin(l,r,TOK_A_COMMA); } )?
                                    R_PRN               { $$ = l; }
                        | < ERROREXP > { print_error("string, string (,numeric) expressions", yytext); }
                        )

# Parameters to functions with one string expression in parenthesis
ParStrExpr        = L_PRN l:StrExprErr R_PRN           { $$ = l; }

# Spacing...
SPC              = [ \t]*
EndOfLine        = ( '\n' | '\233' | "\r\n" | '\r' | EndOfFile ) { inc_file_line(); }
NotEOL           = [^\n\233\r]
EndOfFile        = !.
UnicodeBOM       = "\357\273\277"


# Line Numbers - accept any floating point number and check later for validity
LineNumber       =(   < '-'? [0-9]+ ( '.' [0-9]+ )? NumExp? > SPC
                    | < '-'? '.' [0-9]+ NumExp? > SPC             ) { add_linenum( strtod(yytext,0) ); }

# Identifiers (labels / variables)
IdentifierInit    = [a-zA-Z_]
IdentifierChar    = [a-zA-Z0-9_]
Identifier        = IdentifierInit IdentifierChar*

# Numbers
Number           = HexNumber                                   { $$ = add_hex_number( strtol(yytext,0,16) ); }
                 | DecNumber                                   { $$ = add_number( strtod(yytext,0) ); }

HexNumber        = '$' < [a-fA-F0-9]+ > SPC

DecNumber        = < '-'? [0-9]+ ( '.' [0-9]* )? NumExp? > SPC
                 | < '-'? '.' [0-9]+ NumExp? > SPC

# The exponent of a floating point number
NumExp           = ( 'e' | 'E' ) ( '+' | '-' )? [0-9] [0-9]?

# Parse special REMs
REM_C            = "'" SPC

# Simple TOKENS
COMMA           = ',' SPC
SEMICOLON       = ';' SPC
SHARP           = '#' SPC
LEQ             = '<=' SPC
NEQ             = '<>' SPC
GEQ             = '>=' SPC
LE              = '<' SPC
GE              = '>' SPC
EQ              = '=' SPC
CARET           = '^' SPC
STAR            = '*' SPC
PLUS            = '+' SPC
MINUS           = '-' SPC
SLASH           = '/' SPC
L_PRN           = '(' SPC
R_PRN           = ')' SPC
ANDPER          = '&' SPC
EXCLAM          = '!' SPC
PER_0           = '%0' SPC
PER_1           = '%1' SPC
PER_2           = '%2' SPC
PER_3           = '%3' SPC

