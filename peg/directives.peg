#
# This file defines the parsing rules for parser directives, that affect the
# parser and output.
#
# Note that directives always begin with spaces and a '$', this is removed in
# the main parser.

DirectiveLine  = ( OptionsDirective
                 | IncBinaryDirect
                 | IncDataDirect
                 | DefineVariable
                 | < ERROR >             { print_error("parser directive", yytext); }
                 )
                 SPC
                 (
                   EndOfLine
                 | < (!EndOfLine .)* >   { print_error("end of line", yytext); }
                 )

# ------ Include Binary ------
IncBinaryDirect   = 'incbin' SPC (
                       StrDefName        { add_definition(yytext); }
                       SPC ','
                       SPC IncFileName SPC  ( ',' SPC IncFileOffset ( ',' SPC IncFileLength )? )?
                                         { add_incbin_file(0); }
                     | < ERROR >         { print_error("$incbin def and file name", yytext); }
                     )

IncDataDirect     = 'incdata' SPC (
                       IncFileName SPC  ( ',' SPC IncFileOffset ( ',' SPC IncFileLength )? )?
                                         { add_incbin_file(1); }
                     | < ERROR >         { print_error("$incdata file name", yytext); }
                     )

IncFileName       = '"' < ( !'"' . )+ > '"' { set_incbin_filename(yytext); }
IncFileOffset     = HexNumber               { set_incbin_offset(strtol(yytext, 0, 16)); }
                  | IntNumber               { set_incbin_offset(strtol(yytext, 0, 10)); }
IncFileLength     = HexNumber               { set_incbin_length(strtol(yytext, 0, 16)); }
                  | IntNumber               { set_incbin_length(strtol(yytext, 0, 10)); }

# ------ Definitions ------
DefineVariable   = 'define' SPC (
                       DefineNumeric
                     | DefineString
                     | < ERROR >         { print_error("definition = value", yytext); }
                    )

DefineNumeric    = NumDefName SPC '='   { add_definition(yytext); }
                   SPC (
                         DecNumber      { set_numdef_value(strtod(yytext,0)); }
                       | HexNumber      { set_numdef_value(strtol(yytext,0,16)); }
                       | < ERROR >      { print_error("numeric value", yytext); }
                       )

DefineString     = StrDefName SPC '='   { add_definition(yytext); }
                   SPC ( ConstString    { set_strdef_value(); }
                       | ExtendedString { set_strdef_value(); }
                       | < ERROR >      { print_error("string constant", yytext); }
                       )

NumDefName        = < Identifier >
StrDefName        = < Identifier > ( '$'
                                   | !'$' { print_error("name ending with '$'", yytext); } )
# ------ Parser Options ------
OptionsDirective  = 'options' SPC OptionList
OptionList        = ParserOption ( ',' SPC ParserOption
                                 | < ERROREXP > { print_error("',' or end of line", yytext); }
                                 )*

ParserOption  =
    'mode' SPC (
                '=' SPC ParserOptionMode
               | < ERROREXP >            { print_error("'=' and parsing mode", yytext); }
               )
  | 'optimize' SPC  '=' SPC OptimizeSuboptions
  | < ( '-' | '+' )? > 'optimize' SPC   &{ parser_set_optimize(yytext[0] != '-') , 1 }
  | < ERROREXP >                         { print_error("parsing option name", yytext); }

ParserOptionMode  = 'default'           &{ parser_set_mode(parser_mode_default), 1 }
                  | 'compatible'        &{ parser_set_mode(parser_mode_compatible), 1 }
                  | 'extended'          &{ parser_set_mode(parser_mode_extended), 1 }
                  | < ERROREXP >         { print_error("parsing mode", yytext); }

OptimizeSuboptions   = (
                        < ( '+' | '-' ) [a-zA-Z_][a-zA-Z0-9_]* > (
                        &{ parser_add_optimize_str( yytext + 1, yytext[0] == '+' ) }
                        |                { print_error("optimize option", yytext); }
                        )
                       )+
